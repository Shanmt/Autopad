Add State and city to DB

//Change DB 
State and city exists 

ALTER TABLE `clubauto_cloud`.`servicestationdetails` 
ADD COLUMN `Dealer` VARCHAR(45) NULL AFTER `createddate`;


//Update Existing Customers with State as Kerala and City as trivandrum 


SET SQL_SAFE_UPDATES = 0;

Update  servicestationdetails set city = 'Trivandrum' ,state ='Kerala' ;

SET SQL_SAFE_UPDATES =1;


//Change SP 

DROP procedure IF EXISTS `registerServiceStation`;

DELIMITER $$
USE `clubauto_cloud`$$
CREATE  PROCEDURE `registerServiceStation`(serviceStationName varchar(100),
	userFullName  Varchar(45),
    userContactnumber  varchar(45),
      photourl  varchar(45), 
    _type varchar(45), _verificationcode varchar(10),
    _state varchar(45), _city varchar(45)
    
    )
BEGIN
    Declare _userID varchar(45);
	Declare _serviceStationId  varchar(45);
    Declare datevalue date;
   /* See if the service station already exists. this can be done only by name. */
	Declare sscount int;
    set sscount = (SELECT Count(*) FROM servicestationdetails where contactnumber =userContactnumber);
    if(sscount=0) then 
        
    set sscount = (SELECT Count(*) FROM servicestationdetails where servicestation =serviceStationName);
    if(sscount = 0)
    Then
    
    set _userId = (SELECT UUID());
    set _serviceStationId = (SELECT UUID());
   
   insert into users(userid,fullname,phonenumber,createdDate,isActive,verificationcode) 
		values
			(_userId,userFullName,userContactNumber,curdate(),1,_verificationcode);
	/*SELECT LAST_INSERT_ID();*/
   
    insert into servicestationdetails 
		(servicestationid,servicestation,contactnumber,contactperson,photo,servicestationType,createddate,isActive,state,city)
        values
			(_serviceStationId,serviceStationName,userContactnumber,userFullName,photourl,_type,curdate(),1,_state,_city) ;
    
    insert into servicestationUsers (userid,servicestationid) values (_userid,_serviceStationId);
    -- ssid varchar(45),_amount decimal(18,2),_paymentmode varchar(45),_SMSCount int)
	
    select 'SUCESS',_userid,_servicestationid;
    
    call purchaseSMS(_servicestationid,0,'Registration offer-Updated',25);
    else 
		select 'FAILURE','SERVICE STATION ALREADY EXISTS';
    End if;
    
 else
		select 'FAILURE','CONTACT NUMBER ALREADY REGISTERED';
    end if ; 
    
    
END$$

DELIMITER ;


//MAKE Changes in the application 
Changes made in handle_registerServiceStation function 

//Changes in getService station details 

DROP procedure IF EXISTS `serviceCentreDetails`;

DELIMITER $$
USE `clubauto_cloud`$$
CREATE  PROCEDURE `serviceCentreDetails`(uid  varchar(45), ssid varchar(45))
BEGIN

Declare count int;
    set count = (SELECT COUNT(*) FROM servicestationUsers where userid=uid and servicestationid = ssid);
    if(count > 0)     then  

		select 'success' as status;
		
		SELECT servicestation,phone, contactnumber,contactperson,servicestationType,createddate,Date_Format(createddate,'%b %d %Y') as joineddate, creditSMS,SMSused, (creditSMS-SMSused) as PendingSMS, city, state
 FROM
 servicestationdetails LEFT OUTER JOIN
  smsmain ON
 servicestationdetails.servicestationid = smsmain.servicestationid
  where servicestationdetails.servicestationid=ssid;
  
	 else
		select 'failure in authentication' as status;
        
    end if;
END$$

DELIMITER ;

================================================================================================================================================================================================================================

Add a user with a usertype 
Type can be Admin / Supervisor 

When a service station is created, the default user should be an Admin. 
The admin will have facility to change the other users. 

//Add field called usertype in Users and set default value as Admin // so no need to change in teh insert while creating a user

ALTER TABLE `clubauto_cloud`.`users` 
ADD COLUMN `userType` VARCHAR(45) NULL DEFAULT 'Admin' AFTER `verificationcode`;

ALTER TABLE `clubauto_cloud`.`users` 
ADD COLUMN `parentUser` VARCHAR(45) NULL DEFAULT 'System' AFTER `userType`;


//Any user can be deleted only by the parent user. / System user. 

//Login needs to be corrected by making change in Storeprocedure for login 
USE `clubauto_cloud`;
DROP procedure IF EXISTS `checkLogin`;

DELIMITER $$
USE `clubauto_cloud`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `checkLogin`(_contact varchar(45), _passcode varchar(10))
BEGIN
	SELECT        servicestationUsers.userid, servicestationUsers.servicestationid,  users.fullname as  'contactperson'
FROM            servicestationUsers LEFT OUTER JOIN
                         Users ON servicestationUsers.userid = Users.Userid LEFT OUTER JOIN
                         servicestationdetails ON servicestationUsers.servicestationid = servicestationdetails.servicestationid

                         Where users.phonenumber =_contact
                         and verificationcode = _passcode;
                         
                         

END$$
DELIMITER ;

//in get dropdowndetails add a place to keep the users 
//Add this to the getDropdowndetails SP 

     USE `clubauto_cloud`;
DROP procedure IF EXISTS `getDropdownValues`;

DELIMITER $$
USE `clubauto_cloud`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `getDropdownValues`(_userid varchar(45), _ssid varchar(45))
BEGIN
	/*Autenticate if the user and ssid wroks*/
    Declare count int;
    set count = (SELECT COUNT(*) FROM servicestationUsers where userid=_userid and servicestationid = _ssid);
    if(count > 0)     then 
		select 'sucess' as status;
        select * from makemodel where typeofss =(SELECT servicestationtype FROM servicestationdetails where servicestationid =_ssid);
        select * from jobmaster where typeofss =(SELECT servicestationtype FROM servicestationdetails where servicestationid =_ssid) ;
        
        SELECT        servicestationUsers.userid, concat(users.fullname,'-',users.phonenumber)  as 'fullname'
FROM            servicestationUsers LEFT OUTER JOIN
                         Users ON servicestationUsers.userid = Users.Userid LEFT OUTER JOIN
                         servicestationdetails ON servicestationUsers.servicestationid = servicestationdetails.servicestationid
Where servicestationdetails.servicestationid=_ssid;

        
    else
		select 'failure' as status;
        
    end if;
END$$

DELIMITER ;

//Added code in the WEb to insert the dropdown. 
//save Job needs to have the field added. 

//In customerjob add a field called supervisor name.

ALTER TABLE `clubauto_cloud`.`customerjob` 
ADD COLUMN `supervisorid` VARCHAR(45) NULL AFTER `cheifcomplaint`;

//Change createCustomer SP by adding the supervisorID along with it. 

USE `clubauto_cloud`;
DROP procedure IF EXISTS `createCustomer`;

DELIMITER $$
USE `clubauto_cloud`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `createCustomer`(_userid varchar(45), _ssid varchar(45 ),regid varchar(45), mobile varchar(45), cname varchar(45), 
make varchar(45), model varchar(45), photo varchar(45), status varchar(45), estimatedtime varchar(45), estimatedamount decimal(18,12),jobid varchar(45),_cheifcomplaint varchar(1000), 
_engineno varchar(45), _chasisno varchar(45), supervisor varchar(45)
)
BEGIN
	 Declare count int;
     dECLARE _Customerid varchar(45);
     declare _vehicleid varchar(45);
     declare _customerjobid varchar(45);
     declare _estimatedtime datetime;
    set count = (SELECT COUNT(*) FROM servicestationUsers where userid=_userid and servicestationid = _ssid);
    if(count > 0)     then 
		/*this is the place where you need to add the vehcile*/
        /*search if the customer exists, if he exists get the customer id else insert customer get customerid */
        Set _Customerid = (Select Customer.Customerid from Customer where contact =mobile and ssid =_ssid LIMIT 1);
        

        if(isnull(_Customerid)=1)
        then
			set _Customerid = (SELECT UUID());
			/* insert customer data and  get the customerid*/
            INSERT INTO CUSTOMER (CustomerId,customername, contact, createdate,ssid) values (_Customerid, cname,mobile, now(),_ssid)  ;
        end if;
            
        /*find if the customer_vehicle already exists if yes get the vehicle id, else insert the vehicle details get vehicleid */    
       Set _vehicleid = (Select vehicleid from customer_vehicle where registrationid =regid and ssid =_ssid  LIMIT 1);
        
		if(isnull(_vehicleid)=1)
        then
			set _vehicleid = (SELECT UUID());
            
            INSERT INTO customer_vehicle(vehicleid,customer_vehicle.type,customerid, registrationid,photo,make,model,customer_vehicle.year,isActive,createddate,ssid,engineno,chasisno)
            values (_vehicleid,'',_Customerid,regid,'',make,model,'',1,now(),_ssid,_engineno,_chasisno);
        end if;
        
        
         /* if jobid(customerjobdetails) is passed then edit estimatedtime and estimatedamount or else  insert the customer job details and get the customerjobid */    
		 /* return 'success',customerid,vehicleid, jobid */
       
         set count = (Select Count(*) from customerjob where customerjobid = jobid);
          
          set  _estimatedtime = str_to_date(estimatedtime,'%d-%m-%Y %h:%i %p' );
         -- set  _estimatedtime = str_to_date(estimatedtime,'%Y-%m-%d %h:%i %p' );
         
         if(count>0)
         then 
			/* job needs to be edited*/
            SET SQL_SAFE_UPDATES = 0;
            delete from customerjobdetails where customerjobid = jobid; 
            SET SQL_SAFE_UPDATES = 1;
            
           Update customerjob set estimateendtime = _estimatedtime, estimateamount=estimatedamount,cheifcomplaint = _cheifcomplaint, supervisorid=supervisor  where customerjobid = jobid;
            set _customerjobid = jobid;
         else
			set _customerjobid = (SELECT UUID());
          
            insert into customerjob (customerjobid,customerid, vehicleid,status,estimateendtime,estimateamount,actualcompletetime,actualamount,createdate,ssid,createdUser,cheifcomplaint,supervisorid) 
            values (_customerjobid,_Customerid,_vehicleid,'UNATTENDED',_estimatedtime,estimatedamount,null,0,now(),_ssid,_userid,_cheifcomplaint,supervisor);
            
            
         
         end if;
         select 'success',_Customerid,_vehicleid,_customerjobid;
         
         
    else
		select 'failure not authenticated' as status;
        
    end if;
END$$

DELIMITER ;


//Make changes in the node js application in the area of postJob 

//Make changes in jobDetails SP for getting the job details. 

USE `clubauto_cloud`;
DROP procedure IF EXISTS `jobDetails`;

DELIMITER $$
USE `clubauto_cloud`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `jobDetails`(_userid varchar(45), _ssid varchar(45), jobid varchar(45))
BEGIN
 Declare count int;
	set count = (SELECT COUNT(*) FROM servicestationUsers where userid=_userid and servicestationid = _ssid);
    if(count > 0)     then 
		SELECT        customerjob.customerid, customerjob.vehicleid, customerjob.status, customerjob.estimateendtime, customerjob.estimateamount, customerjob.actualcompletetime, 
                         customerjob.actualamount, customerjob.createdate, customerjob.ssid, customerjob.cheifcomplaint, customerjob.createduser, customer_vehicle.type, 
                         customer_vehicle.registrationid, customer_vehicle.make, customer_vehicle.model, customer_vehicle.year, customer_vehicle.isactive, customer_vehicle.engineno, 
                         customer_vehicle.chasisno, customer.customername, customer.contact, customerjob.supervisorid
FROM            customerjob LEFT OUTER JOIN
                         customer_vehicle ON customerjob.vehicleid = customer_vehicle.vehicleid
                          LEFT OUTER JOIN
                         customer ON customerjob.customerid = customer.customerid
WHERE        (customerjob.customerjobid = jobid);

SELECT * FROM customerjobdetails where customerjobid =jobid;


SELECT `vehicle_advanceddetails`.`id`,
    `vehicle_advanceddetails`.`customerjobid`,
    `vehicle_advanceddetails`.`FuelLevel`,
    `vehicle_advanceddetails`.`mechanicincharge`,
    `vehicle_advanceddetails`.`mechanicname`,
    `vehicle_advanceddetails`.`odometerreading`,
    `vehicle_advanceddetails`.`milege`,
    if(servicebooklet,'True','False') as servicebooklet,
     if(sparewheel,'True','False')as sparewheel,
      if(jackandhandle,'True','False')as jackandhandle,
       if(toolkit,'True','False')as toolkit,
        if(mats,'True','False')as mats,
         if(mudflaps,'True','False')as mudflaps,
          if(stereo,'True','False')as stereo,
           if(clock,'True','False')as clock,
            if(wheelcaps,'True','False')as wheelcaps,
    
    `vehicle_advanceddetails`.`crack`,
    `vehicle_advanceddetails`.`dent`,
    `vehicle_advanceddetails`.`scratch`,
    `vehicle_advanceddetails`.`createddate`,
    `vehicle_advanceddetails`.`others`
FROM `vehicle_advanceddetails`
where customerjobid =jobid;
    
    end if;
END$$

DELIMITER ;


// Facility to add users in Node JS application 

// create SP for createOtherUsers


USE `clubauto_cloud`;
DROP procedure IF EXISTS `createOtherUsers`;

DELIMITER $$
USE `clubauto_cloud`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `createOtherUsers`(_userid varchar(45),_ssid varchar(45),_fullname varchar(45), _phone varchar(45),Passcode varchar(10), _type varchar(45))
BEGIN
Declare count int;
declare _id varchar(45);

    set count = (SELECT COUNT(*) FROM servicestationUsers where userid=_userid and servicestationid = _ssid);
    if(count > 0)     then 
		set _id = (SELECT UUID());
        insert into users (Userid, fullname, phonenumber, createdDate,isActive, verificationcode,userType,parentUser) 
        values 
        (
        _id, _fullname, _phone, now(),1,Passcode, _type, _userid
        );

	insert into servicestationusers (userid, servicestationid) values (_id, _ssid);
	

	Select 'Success','Record Created successfully' ;
    else
	Select 'Failure','Authentication failed';
    end if; 

END$$

DELIMITER ;


//Update user SP creation 
USE `clubauto_cloud`;
DROP procedure IF EXISTS `updateOtherusers`;

DELIMITER $$
USE `clubauto_cloud`$$
CREATE PROCEDURE `updateOtherusers` (_userid varchar(45),_ssid varchar(45),_updateUserid varchar(45),_fullname varchar(45), _phone varchar(45),Passcode varchar(10), _type varchar(45))
BEGIN
Declare count int;
declare _id varchar(45);

    set count = (SELECT COUNT(*) FROM servicestationUsers where userid=_userid and servicestationid = _ssid);
    if(count > 0)     then 
		set _id = (SELECT UUID());
        
        Update users set 
        fullname = _fullname,
        phonenumber = _phone
        where Userid = _updateUserid;

	Select 'Success','Record Updated successfully' ;
    else
	Select 'Failure','Authentication failed';
    end if; 


END
$$

DELIMITER ;

//Update user Node function creation and url creation

//UpdateOtherusers storedprocedure create

USE `clubauto_cloud`;
DROP procedure IF EXISTS `updateOtherusers`;

DELIMITER $$
USE `clubauto_cloud`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `updateOtherusers`(_userid varchar(45), _ssid varchar(45),_fullname varchar(45), _phone varchar(45),Passcode varchar(10), _type varchar(45), UpdateUserid varchar(45))
BEGIN

Declare count int;
declare _id varchar(45);

    set count = (SELECT COUNT(*) FROM servicestationUsers where userid=_userid and servicestationid = _ssid);
    if(count > 0)     then 
        Update users set fullname = _fullname, phonenumber =_phone, isActive= 1, verificationcode= Passcode, userType= _type
        Where userid = UpdateUserid;
        
        
		Select 'Success','Record Updated successfully' ;
    else
		Select 'Failure','Authentication failed';
    end if; 

END$$

DELIMITER ;

// Function for delete user under you. 
handle_deleteuser


// SP for deleteuser

USE `clubauto_cloud`;
DROP procedure IF EXISTS `deleteUser`;

DELIMITER $$
USE `clubauto_cloud`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `deleteUser`(_userid varchar(45), _ssid varchar(45),_deleteUserid varchar(45))
BEGIN
	
Declare count int;
declare _id varchar(45);

    set count = (SELECT COUNT(*) FROM servicestationUsers where userid=_userid and servicestationid = _ssid);
    if(count > 0)     then 
			SET SQL_SAFE_UPDATES = 0;

				Update users set isActive = 0 where userid  = _deleteUserid;
                
            SET SQL_SAFE_UPDATES = 1;
		
		Select 'Success','Record Updated successfully' ;
    else
		Select 'Failure','Authentication failed';
    end if; 

END$$

DELIMITER ;

// SP Change in getDropdowndetails for gettingnon deleted users

CREATE DEFINER=`root`@`localhost` PROCEDURE `getDropdownValues`(_userid varchar(45), _ssid varchar(45))
BEGIN
	/*Autenticate if the user and ssid wroks*/
    Declare count int;
    set count = (SELECT COUNT(*) FROM servicestationUsers where userid=_userid and servicestationid = _ssid);
    if(count > 0)     then 
		select 'sucess' as status;
        select * from makemodel where typeofss =(SELECT servicestationtype FROM servicestationdetails where servicestationid =_ssid);
        select * from jobmaster where typeofss =(SELECT servicestationtype FROM servicestationdetails where servicestationid =_ssid) ;
        
        SELECT        servicestationUsers.userid, concat(users.fullname,'-',users.phonenumber)  as 'fullname'
FROM            servicestationUsers LEFT OUTER JOIN
                         Users ON servicestationUsers.userid = Users.Userid LEFT OUTER JOIN
                         servicestationdetails ON servicestationUsers.servicestationid = servicestationdetails.servicestationid
Where servicestationdetails.servicestationid=_ssid and Users.isActive=1;

        
    else
		select 'failure' as status;
        
    end if;
END


// Check Login changes in sp 
USE `clubauto_cloud`;
DROP procedure IF EXISTS `checkLogin`;

DELIMITER $$
USE `clubauto_cloud`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `checkLogin`(_contact varchar(45), _passcode varchar(10))
BEGIN
	SELECT        servicestationUsers.userid, servicestationUsers.servicestationid,  users.fullname as  'contactperson', users.userType
FROM            servicestationUsers LEFT OUTER JOIN
                         Users ON servicestationUsers.userid = Users.Userid LEFT OUTER JOIN
                         servicestationdetails ON servicestationUsers.servicestationid = servicestationdetails.servicestationid

                         Where users.phonenumber =_contact
                         and verificationcode = _passcode
                         and users.isActive=1
                         ;
  

END$$

DELIMITER ;



// Select users SP getUsers 

USE `clubauto_cloud`;
DROP procedure IF EXISTS `getUsers`;

DELIMITER $$
USE `clubauto_cloud`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `getUsers`(_userid varchar(45), _ssid varchar(45))
BEGIN
		
Declare count int;
Declare utype varchar(45);
declare _id varchar(45);

    set count = (SELECT COUNT(*) FROM servicestationUsers where userid=_userid and servicestationid = _ssid);
    if(count > 0)     then 
		set utype = (select userType from users where userid = _userid);
		if(utype ='Admin') then 
		Select 'Success';
    
		SELECT users.userid, users.fullname	, users.phonenumber, users.createdDate, users.verificationcode, userType FROM clubauto_cloud.servicestationusers
			LEFT OUTER JOIN  users ON users.userid = servicestationusers.userid
			Where servicestationid = _ssid;
            
		else 
			Select 'Failure','User does not have privilege';
        end if; 
    else
		Select 'Failure','Authentication failed';
    
    end if;
END$$

DELIMITER ;


//Changes made in the createCustomer SP 

// Changes made in the getCurrentVehicleList result by adding supervisor id and name

//Update supervisor id for all who have null as supervisorid 

SET SQL_SAFE_UPDATES = 0;
Update customerjob set supervisorid = createduser where isnull(supervisorid)=1;
SET SQL_SAFE_UPDATES = 1;

//Make change in searchVehicleswtihStatus

USE `clubauto_cloud`;
DROP procedure IF EXISTS `searchVehicleswithStatus`;

DELIMITER $$
USE `clubauto_cloud`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `searchVehicleswithStatus`(_userid varchar(45), _ssid varchar(45), searchstring varchar(45))
BEGIN 
 Declare count int;
    set count = (SELECT COUNT(*) FROM servicestationUsers where userid=_userid and servicestationid = _ssid);
    if(count > 0)     then 
		select 'success' as status;
        if(searchstring='') Then
			
SELECT        customerjob.customerjobid, customer.customername, customer.contact, customer_vehicle.registrationid, customer_vehicle.photo, customer_vehicle.make, 
                         customer_vehicle.model, customer_vehicle.year, customer_vehicle.createddate, customerjob.status, DATE_FORMAT(customerjob.estimateendtime,'%d/%m/%Y %H:%i') as estimateendtime, customerjob.estimateamount, 
                         customerjob.actualcompletetime, customerjob.actualamount, customerjob.createdate AS jobdate, customerjob.cheifcomplaint, customerjob.ssid, 
                         customerjob.vehicleid, (SELECT group_concat(customerjobdetails.jobname SEPARATOR  ', ')  FROM customerjobdetails where customerjobid = customerjob.customerjobid
group by customerjobid) as Jobs
,DATE_FORMAT(customerjob.estimateendtime,'%H:%i') as timealone, DATE_FORMAT(customerjob.estimateendtime,'%d-%m-%Y') as datealone
,DATE_FORMAT(customer_vehicle.createddate,'%b %d %Y  %H:%i %p') as createddateformatted, vehicle_advanceddetails.mechanicname, supervisorid, users.fullname
FROM            customerjob LEFT OUTER JOIN
                         customer_vehicle ON customerjob.vehicleid = customer_vehicle.vehicleid LEFT OUTER JOIN
                         customer ON customerjob.customerid = customer.customerid
						LEFT OUTER JOIN vehicle_advanceddetails ON customerjob.customerjobid = vehicle_advanceddetails.customerjobid
                        
                        WHERE        (customerjob.ssid =_ssid) and 
					(isnull(actualcompletetime)=1 or  date(actualcompletetime) =curdate() ) and (Status not like 'CANCELLED')
                    order by customerjob.createdate desc;
                    
                    
		else
			 
                    
                    SELECT        customerjob.customerjobid, customer.customername, customer.contact, customer_vehicle.registrationid, customer_vehicle.photo, customer_vehicle.make, 
                         customer_vehicle.model, customer_vehicle.year, customer_vehicle.createddate, customerjob.status, DATE_FORMAT(customerjob.estimateendtime,'%d/%m/%Y %H:%i') as estimateendtime, customerjob.estimateamount, 
                         customerjob.actualcompletetime, customerjob.actualamount, customerjob.createdate AS jobdate, customerjob.cheifcomplaint, customerjob.ssid, 
                         customerjob.vehicleid, (SELECT group_concat(customerjobdetails.jobname SEPARATOR  ', ')  FROM customerjobdetails where customerjobid = customerjob.customerjobid
group by customerjobid) as Jobs
,DATE_FORMAT(customerjob.estimateendtime,'%H:%i') as timealone, DATE_FORMAT(customerjob.estimateendtime,'%d-%m-%Y') as datealone
,DATE_FORMAT(customer_vehicle.createddate,'%b %d %Y  %H:%i %p') as createddateformatted, vehicle_advanceddetails.mechanicname, supervisorid, users.fullname
FROM            customerjob LEFT OUTER JOIN
                         customer_vehicle ON customerjob.vehicleid = customer_vehicle.vehicleid LEFT OUTER JOIN
                         customer ON customerjob.customerid = customer.customerid
						LEFT OUTER JOIN vehicle_advanceddetails ON customerjob.customerjobid = vehicle_advanceddetails.customerjobid
                        
					where ((customerjob.ssid =_ssid) ) AND 
					(
						(CustomerName like CONCAT('%',searchstring,'%')
						or registrationid like CONCAT('%',searchstring,'%')
						or contact like CONCAT('%',searchstring,'%')
						or make like CONCAT('%',searchstring,'%')
						or model like CONCAT('%',searchstring,'%')
						or 'year' like CONCAT('%',searchstring,'%')
						)
					) and (Status not like 'CANCELLED')
                   order by customerjob.createdate desc ;
    
                    
		end if;
    else
		select 'failure' as status;
        
    end if;
END$$

DELIMITER ;


//Make changes in getUsers for returning only 

USE `clubauto_cloud`;
DROP procedure IF EXISTS `getUsers`;

DELIMITER $$
USE `clubauto_cloud`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `getUsers`(_userid varchar(45), _ssid varchar(45))
BEGIN
		
Declare count int;
Declare utype varchar(45);
declare _id varchar(45);

    set count = (SELECT COUNT(*) FROM servicestationUsers where userid=_userid and servicestationid = _ssid);
    if(count > 0)     then 
		set utype = (select userType from users where userid = _userid);
		if(utype ='Admin') then 
		Select 'Success';
    
		SELECT users.userid, users.fullname	, users.phonenumber, users.createdDate, users.verificationcode, userType, if(users.isActive=true,1,0) as 'isActive' FROM clubauto_cloud.servicestationusers
			LEFT OUTER JOIN  users ON users.userid = servicestationusers.userid
			Where servicestationid = _ssid ;
            
		else 
			Select 'Failure','User does not have privilege';
        end if; 
    else
		Select 'Failure','Authentication failed';
       
    end if;
END$$

DELIMITER ;

